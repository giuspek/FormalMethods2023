-------------------------------------------------------------------------------
-- nuXmv model implementing the "tris" (tic-tac-toe) puzzle
--
--               X |   |
--             ____|___|____
--                 | X |
--             ____|___|____
--               O |   | O
--                 |   |
--
-- Numbering of the board squares:
--
--               1 | 2 | 3
--             ____|___|____
--               4 | 5 | 6
--             ____|___|____
--               7 | 8 | 9
--                 |   |
-------------------------------------------------------------------------------

MODULE main

-- the board
-- "0" means empty,
-- "1" filled by player 1,
-- "2" filled by player 2
VAR
    B : array 1..9 of {0,1,2};
    player : 1..2;
    move : 0..9;

INIT
    player = 1 &
    B[1] = 0 &
    B[2] = 0 &
    B[3] = 0 &
    B[4] = 0 &
    B[5] = 0 &
    B[6] = 0 &
    B[7] = 0 &
    B[8] = 0 &
    B[9] = 0

TRANS
    next(player) != player

TRANS
    B[1] != 0 -> next(B[1]) = B[1] &
    B[2] != 0 -> next(B[2]) = B[2] &
    B[3] != 0 -> next(B[3]) = B[3] &
    B[4] != 0 -> next(B[4]) = B[4] &
    B[5] != 0 -> next(B[5]) = B[5] &
    B[6] != 0 -> next(B[6]) = B[6] &
    B[7] != 0 -> next(B[7]) = B[7] &
    B[8] != 0 -> next(B[8]) = B[8] &
    B[9] != 0 -> next(B[9]) = B[9]

TRANS
    B[1] != 0 -> next(move) != 1 &
    B[2] != 0 -> next(move) != 2 &
    B[3] != 0 -> next(move) != 3 &
    B[4] != 0 -> next(move) != 4 &
    B[5] != 0 -> next(move) != 5 &
    B[6] != 0 -> next(move) != 6 &
    B[7] != 0 -> next(move) != 7 &
    B[8] != 0 -> next(move) != 8 &
    B[9] != 0 -> next(move) != 9

TRANS
    (move = 1 -> (next(B[1]) = player)) &
    (move = 2 -> (next(B[2]) = player)) &
    (move = 3 -> (next(B[3]) = player)) &
    (move = 4 -> (next(B[4]) = player)) &
    (move = 5 -> (next(B[5]) = player)) &
    (move = 6 -> (next(B[6]) = player)) &
    (move = 7 -> (next(B[7]) = player)) &
    (move = 8 -> (next(B[8]) = player)) &
    (move = 9 -> (next(B[9]) = player))

TRANS
    (move != 1 -> (next(B[1]) = B[1])) &
    (move != 2 -> (next(B[2]) = B[2])) &
    (move != 3 -> (next(B[3]) = B[3])) &
    (move != 4 -> (next(B[4]) = B[4])) &
    (move != 5 -> (next(B[5]) = B[5])) &
    (move != 6 -> (next(B[6]) = B[6])) &
    (move != 7 -> (next(B[7]) = B[7])) &
    (move != 8 -> (next(B[8]) = B[8])) &
    (move != 9 -> (next(B[9]) = B[9]))

TRANS
    (win_1 | win_2 | draw) <-> move = 0

DEFINE
    win_1 := (
        (B[1] = 1 & B[2] = 1 & B[3] = 1) |
        (B[4] = 1 & B[5] = 1 & B[6] = 1) |
        (B[7] = 1 & B[8] = 1 & B[9] = 1) |

        (B[1] = 1 & B[4] = 1 & B[7] = 1) |
        (B[2] = 1 & B[5] = 1 & B[8] = 1) |
        (B[3] = 1 & B[6] = 1 & B[9] = 1) |

        (B[1] = 1 & B[5] = 1 & B[9] = 1) |
        (B[3] = 1 & B[5] = 1 & B[7] = 1)
    );

DEFINE
    win_2 := (
        (B[1] = 2 & B[2] = 2 & B[3] = 2) |
        (B[4] = 2 & B[5] = 2 & B[6] = 2) |
        (B[7] = 2 & B[8] = 2 & B[9] = 2) |

        (B[1] = 2 & B[4] = 2 & B[7] = 2) |
        (B[2] = 2 & B[5] = 2 & B[8] = 2) |
        (B[3] = 2 & B[6] = 2 & B[9] = 2) |

        (B[1] = 2 & B[5] = 2 & B[9] = 2) |
        (B[3] = 2 & B[5] = 2 & B[7] = 2)
    );

DEFINE
    draw := (!win_1 & !win_2 & (
        B[1] != 0 &
        B[2] != 0 &
        B[3] != 0 &
        B[4] != 0 &
        B[5] != 0 &
        B[6] != 0 &
        B[7] != 0 &
        B[8] != 0 &
        B[9] != 0
    ));


LTLSPEC !F(win_1)
LTLSPEC !F(win_2)
LTLSPEC !F(draw)
